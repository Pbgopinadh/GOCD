format_version: 10
pipelines:
  demo_pipeline: # definition of mypipe1 pipeline
    group: demo_pipeline # note that the group name can contain only of alphanumeric & underscore characters
    display_order: 10
    label_template: "${COUNT}"
    locking: true #If a pipeline is locked then GoCD will not allow any other instance of that pipeline to be scheduled until the currently running one has been completed.
    materials: # material is the source repo of the pipe line
      mygit: # this is the name of material, the name can contain only of alphanumeric & underscore characters
        git: https://github.com/Pbgopinadh/GOCD.git # keyword git says about type of material and url at once
        auto_update: true  # when ever there are any changes in git code the pipeline will be auto-updated.
        shallow_clone: true # this copy the repo and latest history
        branch: main
    stages:                                       
          - dev:                                        # Name of the stage 
              fetch_materials: true 
              keep_artifacts: false
              clean_workspace: false
              environment_variables: # this is how we sent the paramters to the commands that we use.
                ENV: dev
                Component: sql
              secure_variables:
                passwd: AES:AVO1LEWU1XnYqZj5nby6WQ==:nLBkxHtPXd0u/TtHL4xm0g==
              jobs:
                dev:
                  tasks:
                    - exec:
                        command: bash 
                        arguments:
                        - demo.sh # see this file has the following written

#  echo "$(whoami) is installing ${Component} on ${ENV}" component and env will be taken from the env variables.
# sudo su -
# touch /home/ec2-user/${Component}.txt
# ls -ltr                     
          - qa: 
              environment_variables:
                ENV: qa
                Component: sql
              # approval: # if this is removed upto allowonlyonsuccess then there will no manual in
              #   type: manual # this stage will only be trigerred when the previous stage is successful and there is manual approval to proceed.
              #   allow_only_on_success: true
              jobs:
                qa:
                  tasks:
                    - exec:
                        run_if: passed
                        command: bash 
                        arguments:
                        - demo.sh
          - stage:
              environment_variables:
                ENV: stage
                Component: sql
              # approval:
              #   type: manual
              #   allow_only_on_success: true
              jobs:
                stage:
                  tasks:
                    - exec:
                        command: bash 
                        arguments:
                        - demo.sh

          - prod:
              fetch_materials: true 
              keep_artifacts: false
              clean_workspace: false 
              environment_variables:
                ENV: prod
                Component: sql
              approval:
                type: manual
                allow_only_on_success: true
              jobs:
                prod:
                  tasks:
                    - exec:
                        command: bash 
                        arguments:
                        - demo.sh

# curl 'https://ipadressoftheGoCDmaster:8153/go/api/admin/encrypt' \
# -u 'username:password' \
# -H 'Accept: application/vnd.go.cd.v1+json' \
# -H 'Content-Type: application/json' \
# -X POST -d '{
#   "value": "value that we want to encrypt"
# }'

# curl 'http://172.31.5.113:8153/go/api/admin/encrypt' \
# -H 'Accept: application/vnd.go.cd.v1+json' \
# -H 'Content-Type: application/json' \
# -X POST -d '{
#   "value": "DevOps321"
# }'